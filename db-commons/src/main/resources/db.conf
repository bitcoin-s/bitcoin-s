sqlite = {
  dataSourceClass = slick.jdbc.DatabaseUrlDataSource
  profile = "slick.jdbc.SQLiteProfile$"

  db {
    //for information on parameters available here see
    //https://scala-slick.org/doc/3.3.1/api/index.html#slick.jdbc.JdbcBackend$DatabaseFactoryDef@forConfig(String,Config,Driver,ClassLoader):Database
    path = ${bitcoin-s.datadir}/${bitcoin-s.network}/
    driver = org.sqlite.JDBC
    username = ""
    password = ""

    # this needs to be set to 1 for SQLITE as it does not support concurrent database operations
    # see: https://github.com/bitcoin-s/bitcoin-s/pull/1840
    numThreads = 1
  }
}

bitcoin-s {
  wallet = ${sqlite}
  wallet {
    # this config key is read by Slick
    db {
      name = walletdb.sqlite
      url = "jdbc:sqlite:"${bitcoin-s.wallet.db.path}${bitcoin-s.wallet.db.name}
    }
    # PostgreSQL example:
    # db {
    #   url = "jdbc:postgresql://localhost:5432/wallet"
    #   driver = org.postgresql.Driver
    #   username = postgres
    #   password = ""
    # }
  }

  node = ${sqlite}
  node {
    # this config key is read by Slick
    db {
      name = nodedb.sqlite
      url = "jdbc:sqlite:"${bitcoin-s.node.db.path}${bitcoin-s.node.db.name}
    }
    # PostgreSQL example:
    # db {
    #   url = "jdbc:postgresql://localhost:5432/node"
    #   driver = org.postgresql.Driver
    #   username = postgres
    #   password = ""
    # }
  }

  chain = ${sqlite}
  chain {
    # this config key is read by Slick
    db {
      name = chaindb.sqlite
      url = "jdbc:sqlite:"${bitcoin-s.chain.db.path}${bitcoin-s.chain.db.name}
    }
    # PostgreSQL example:
    # db {
    #   url = "jdbc:postgresql://localhost:5432/chain"
    #   driver = org.postgresql.Driver
    #   username = postgres
    #   password = ""
    # }
  }
}
